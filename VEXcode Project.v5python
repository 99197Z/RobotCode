{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nmotor_1_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nmotor_1_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nmotor_1 = MotorGroup(motor_1_motor_a, motor_1_motor_b)\nmotor_2_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nmotor_2_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nmotor_2 = MotorGroup(motor_2_motor_a, motor_2_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\nautopilot = False\n\ndef driverNeeded(func):\n    def wrapper(*args, **kwargs):\n        if not autopilot:\n            func(*args, **kwargs)\n        \n        func(*args, **kwargs)\n    return wrapper\n\ndef autopilotOnly(func):\n    def wrapper(*args, **kwargs):\n        if autopilot:\n            func(*args, **kwargs)\n        func(*args, **kwargs)\n    return wrapper\n\n#max speeds\nspeed_mult = 0.5\nautopilot_max_speed = 50 \ndriver_pilot_max_speed = 100 \n\n\n\ndef clamp(n, min, max): \n    if n < min: \n        return min\n    elif n > max: \n        return max\n    else: \n        return n \n\nclass speedControlls:\n    def __init__(self,mx):\n        self.diff = 0\n        self.speed = 0\n        self.max_speed = mx\n    def calcSpeed(self,inv):\n        if inv:\n            spdDiff = -self.diff\n        else:\n            spdDiff = self.diff\n        return clamp(self.speed - spdDiff,-self.max_speed,self.max_speed)*speed_mult\n\n    def calcMotors(self):\n        brain.screen.next_row()\n        brain.screen.print(str(self.calcSpeed(True)))\n        \n        motor_1.set_velocity(self.calcSpeed(True), PERCENT)\n        motor_2.set_velocity(self.calcSpeed(False), PERCENT)\n\n    @driverNeeded\n    def mspeed(self):\n        pos = controller_1.axis3.position()\n        brain.screen.set_cursor(1,1)\n        brain.screen.clear_screen()\n        brain.screen.print(str(pos))\n        self.speed = pos\n        self.calcMotors()\n\n    @driverNeeded\n    def dspeed(self):\n        pos = controller_1.axis4.position()\n        self.diff = pos\n        self.calcMotors()\n    \n    @autopilotOnly\n    def driveSequence(self):\n        pass\n\n\n\n\n\n\n\nspeed = speedControlls(driver_pilot_max_speed)\n\n# Register event with a callback function.\ncontroller_1.axis3.changed(speed.mspeed)\ncontroller_1.axis4.changed(speed.dspeed)\nmotor_1.spin(FORWARD)\nmotor_2.spin(FORWARD)\nspeed.calcMotors()\n\n    \n    \n\n#when_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2],"name":"motor_1","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"}},{"port":[11,12],"name":"motor_2","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"}}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}